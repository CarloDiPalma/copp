name: Copp

on:
  workflow_dispatch

jobs:
  tests:
    name: Tests postgres and django
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: django_user
          POSTGRES_PASSWORD: django_password
          POSTGRES_DB: django_db
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pep8-naming flake8-broken-line flake8-return flake8-isort
          cd backend/
          pip install -r requirements.txt

      - name: Test with flake8
        run: |
          python -m flake8

      - name: Django Migrations and tests
        env:
          MODE: ${{ secrets.VITE_ENV_MODE }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          POSTGRES_USER: django_user
          POSTGRES_PASSWORD: django_password
          POSTGRES_DB: django_db
        run: |
          cd backend/
          python manage.py makemigrations
          python manage.py migrate
          python manage.py test

  build_and_push_backend_to_docker_hub:
    name: Push Backend image to Docker Hub
    runs-on: ubuntu-latest
    needs: tests

    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to Docker
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push backend to Docker Hub
        uses: docker/build-push-action@v2
        with:
          context: backend/
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/decks-backend:latest

  build_and_push_nginx_to_docker_hub:
    name: Push Nginx Docker image to DockerHub
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push to DockerHub
        uses: docker/build-push-action@v4
        with:
          context: ./nginx/
          push: true
          tags: carlodipalma/decks-nginx:latest

  deploy:
    name: Deploy on a production server
    runs-on: ubuntu-latest
    needs:
      - build_and_push_backend_to_docker_hub
      - build_and_push_nginx_to_docker_hub

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
      - name: Copy file via new ssh
        uses: appleboy/scp-action@master
        with:
          host: 5.253.62.212
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "docker-compose.yaml"
          target: "/root"

      - name: Executing remote ssh commands to deploy
        uses: appleboy/ssh-action@master
        with:
          host: 5.253.62.212
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
          script: |
            sudo docker compose down
            sudo docker image prune -a
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/copp-backend:latest
            rm .env
            touch .env
            echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> .env
            echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> .env
            echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
            echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
            echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
            echo "SECRET_KEY='${{ secrets.SECRET_KEY }}'" >> .env
            echo "DEBUG=${{ secrets.DEBUG }}" >> .env
            echo "STATIC_ROOT=${{ secrets.STATIC_ROOT }}" >> .env
            echo "EMAIL_HOST_USER=${{ secrets.EMAIL_HOST_USER }}" >> .env
            echo "EMAIL_HOST_PASSWORD=${{ secrets.EMAIL_HOST_PASSWORD }}" >> .env
            sudo docker compose up -d
            sudo docker compose exec backend python manage.py makemigrations
            sudo docker compose exec backend python manage.py migrate
            sudo docker compose exec backend python manage.py collectstatic --no-input


  send_message:
    name: Send deploy status message
    runs-on: ubuntu-latest
    needs: deploy

    steps:
    - name: send_message
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_TO }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        message: ${{ github.workflow }} workflow успешно выполнен!